name: AWS Infrastructure Deployment

# Workflow is triggered on push or pull request to the main branch for files in the terraform directory.
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'

# Define environment variables
env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  terraform:
    name: "Terraform Workflow"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 3: Initialize Terraform with the backend configuration
      - name: Initialize Terraform
        run: |
          terraform init \
          -backend-config="bucket=${{ env.BUCKET_TF_STATE }}" \
          -backend-config="region=${{ env.AWS_REGION }}"

      # Step 4: Run Terraform format check
      - name: Check Terraform Formatting
        run: terraform fmt -check
        continue-on-error: true

      # Step 5: Validate Terraform configuration
      - name: Validate Terraform Configuration
        run: terraform validate

      # Step 6: Generate Terraform Plan
      - name: Create Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      # Step 7: Check Plan Status (exit if plan fails)
      - name: Verify Plan Status
        if: failure()
        run: exit 1

      # Step 8: Apply Terraform changes (only on push to main branch)
      - name: Apply Terraform Changes
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false tfplan
