name: AWS Infrastructure

on:
  push:
    branches: 
      - main
    paths: 
      - terraform/**
  pull_request:
    branches: 
      - main
    paths: 
      - terraform/**

env:
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state.
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: "Apply Terraform Code Changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      # Step 1: Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Step 2: Setup Terraform with specified version on the runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}"

      # Step 4: Format check (this ensures the code follows Terraform formatting guidelines)
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true  # Proceed even if formatting issues are found

      # Step 5: Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Plan the changes
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=planfile
        continue-on-error: true  # Allows checking for failure later

      # Step 7: Exit if Terraform Plan fails
      - name: Terraform Plan Status
        if: failure()
        run: exit 1

      # Step 8: Apply changes only on push to the main branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile
